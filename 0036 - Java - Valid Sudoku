class Solution {
    public boolean isValidSudoku(char[][] board) {
        
        HashSet<Character> set = new HashSet<>();

        // check lines
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    if (! set.contains(board[i][j])) {
                        set.add(board[i][j]);
                    } else {
                        return false;
                    }
                }
            }
            set.clear();
        }

        // check collumns
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[j][i] != '.') {
                    if (! set.contains(board[j][i])) {
                        set.add(board[j][i]);
                    } else {
                        return false;
                    }
                }
            }
            set.clear();
        }

        // check squares
        int a;
        int b;
        char ch;
        for (int i = 0; i < 9; i++) {
            a = (i % 3) * 3;
            b = (int) Math.floor(i / 3) * 3;
            for (int x = 0; x < 3; x++) {
                for (int y = 0; y < 3; y++) {

                    ch = board[a + x][b + y];
                    if (ch != '.') {
                        if (set.contains(ch)) {
                            return false;
                        } else {
                            set.add(ch);
                        }
                    }
                }
            }
        set.clear();
        }
    return true;

    }
}
